Blowfish_Decrypt入口sig:

004756F3  |.  83E4 F8       and     esp, 0xFFFFFFF8
004756F6  |.  B8 54100000   mov     eax, 0x1054




找crud+读封包+生成key：

2018/02/01:
这个方法不是很靠谱
对于trinoline genesis这个游戏，这里获取toc_key的方法不对，获取到只有dat_key
而且对于dat_key，顺序也不一定，有的在文件名log前，有的在后，要自己尝试

搜索
mov eax,dword ptr ds:[eax+0x10]
mov ecx,dword ptr ds:[ecx+0x10]
mov edi,dword ptr ds:[esi+0x10]

然后返回到上一级：
004953C6   .  83C4 04                  add esp,0x4                              ;  crud信息
004953C9   .  8D95 7CF9FFFF            lea edx,dword ptr ss:[ebp-0x684]
004953CF   .  8915 70215800            mov dword ptr ds:[0x582170],edx          ;  scr_crud
004953D5   .  8D85 88F9FFFF            lea eax,dword ptr ss:[ebp-0x678]
004953DB   .  A3 74215800              mov dword ptr ds:[0x582174],eax          ;  ogg_crud
004953E0   .  8D8D 60F9FFFF            lea ecx,dword ptr ss:[ebp-0x6A0]
004953E6   .  890D 78215800            mov dword ptr ds:[0x582178],ecx          ;  png_crud
004953EC   .  8D95 6CF9FFFF            lea edx,dword ptr ss:[ebp-0x694]
004953F2   .  8915 7C215800            mov dword ptr ds:[0x58217C],edx          ;  avi_curd
004953F8   .  E8 73270000              call trinolin.00497B70
004953FD   .  C785 5CF9FFFF 00000000   mov dword ptr ss:[ebp-0x6A4],0x0
00495407   .  EB 0F                    jmp short trinolin.00495418
00495409   >  8B85 5CF9FFFF            mov eax,dword ptr ss:[ebp-0x6A4]
0049540F   .  83C0 01                  add eax,0x1
00495412   .  8985 5CF9FFFF            mov dword ptr ss:[ebp-0x6A4],eax
00495418   >  83BD 5CF9FFFF 0C         cmp dword ptr ss:[ebp-0x6A4],0xC
0049541F   .  0F8D E1010000            jge trinolin.00495606
00495425   .  8B8D 5CF9FFFF            mov ecx,dword ptr ss:[ebp-0x6A4]
0049542B   .  8B148D A0C75400          mov edx,dword ptr ds:[ecx*4+0x54C7A0]    ;  trinolin.0051F394
00495432   .  8D85 20F9FFFF            lea eax,dword ptr ss:[ebp-0x6E0]
00495438   .  E8 2307F7FF              call trinolin.00405B60
0049543D   .  8D95 20F9FFFF            lea edx,dword ptr ss:[ebp-0x6E0]         ;  文件封包
00495443   .  52                       push edx                                 ; /Arg3 = 0019F810 ASCII "scr"
00495444   .  68 08F25400              push trinolin.0054F208                   ; |Arg2 = 0054F208
00495449   .  8D85 40F9FFFF            lea eax,dword ptr ss:[ebp-0x6C0]         ; |
0049544F   .  50                       push eax                                 ; |Arg1 = 0019F830
00495450   .  E8 2BE1F8FF              call trinolin.00423580                   ; \＊返回的位置＊
00495455   .  83C4 0C                  add esp,0xC                              ;  从这里开始向下的第二个函数call就可以获取blowfish的key
00495458   .  8B8D 5CF9FFFF            mov ecx,dword ptr ss:[ebp-0x6A4]
0049545E   .  898D 3CF9FFFF            mov dword ptr ss:[ebp-0x6C4],ecx
00495464   .  8B95 5CF9FFFF            mov edx,dword ptr ss:[ebp-0x6A4]
0049546A   .  8995 2CF7FFFF            mov dword ptr ss:[ebp-0x8D4],edx
00495470   .  8B85 2CF7FFFF            mov eax,dword ptr ss:[ebp-0x8D4]
00495476   .  83E8 02                  sub eax,0x2
00495479   .  8985 2CF7FFFF            mov dword ptr ss:[ebp-0x8D4],eax
0049547F   .  83BD 2CF7FFFF 08         cmp dword ptr ss:[ebp-0x8D4],0x8
00495486   .  77 41                    ja short trinolin.004954C9
00495488   .  8B8D 2CF7FFFF            mov ecx,dword ptr ss:[ebp-0x8D4]
0049548E   .  0FB691 085E4900          movzx edx,byte ptr ds:[ecx+0x495E08]
00495495   .  FF2495 F85D4900          jmp dword ptr ds:[edx*4+0x495DF8]
0049549C   >  8B85 3CF9FFFF            mov eax,dword ptr ss:[ebp-0x6C4]
004954A2   .  83E8 01                  sub eax,0x1
004954A5   .  8985 3CF9FFFF            mov dword ptr ss:[ebp-0x6C4],eax
004954AB   >  8B8D 3CF9FFFF            mov ecx,dword ptr ss:[ebp-0x6C4]
004954B1   .  83E9 01                  sub ecx,0x1
004954B4   .  898D 3CF9FFFF            mov dword ptr ss:[ebp-0x6C4],ecx
004954BA   >  8B95 3CF9FFFF            mov edx,dword ptr ss:[ebp-0x6C4]
004954C0   .  83EA 01                  sub edx,0x1
004954C3   .  8995 3CF9FFFF            mov dword ptr ss:[ebp-0x6C4],edx
004954C9   >  6A 20                    push 0x20                                ; /Arg2 = 00000020
004954CB   .  8B85 3CF9FFFF            mov eax,dword ptr ss:[ebp-0x6C4]         ; |
004954D1   .  C1E0 05                  shl eax,0x5                              ; |
004954D4   .  05 C0C35400              add eax,trinolin.0054C3C0                ; |
004954D9   .  50                       push eax                                 ; |Arg1 = 0019F830
004954DA   .  8B8D 5CF9FFFF            mov ecx,dword ptr ss:[ebp-0x6A4]         ; |
004954E0   .  6BC9 0C                  imul ecx,ecx,0xC                         ; |
004954E3   .  81C1 F07A5800            add ecx,trinolin.00587AF0                ; |
004954E9   .  E8 72D1FEFF              call trinolin.00482660                   ; \trinolin.00482660
004954EE   .  6A 20                    push 0x20                                ; /Arg2 = 00000020
004954F0   .  8B8D 3CF9FFFF            mov ecx,dword ptr ss:[ebp-0x6C4]         ; |
004954F6   .  C1E1 05                  shl ecx,0x5                              ; |
004954F9   .  81C1 C0C55400            add ecx,trinolin.0054C5C0                ; |
004954FF   .  51                       push ecx                                 ; |Arg1 = 00000000
00495500   .  8B8D 5CF9FFFF            mov ecx,dword ptr ss:[ebp-0x6A4]         ; |
00495506   .  6BC9 0C                  imul ecx,ecx,0xC                         ; |
00495509   .  81C1 107C5800            add ecx,trinolin.00587C10                ; |blowfish key
0049550F   .  E8 4CD1FEFF              call trinolin.00482660                   ; \call之前的eax是toc_key，call之后的是dat_key
00495514   .  8B8D 5CF9FFFF            mov ecx,dword ptr ss:[ebp-0x6A4]
0049551A   .  6BC9 0C                  imul ecx,ecx,0xC
0049551D   .  81C1 F07A5800            add ecx,trinolin.00587AF0
00495523   .  8B85 5CF9FFFF            mov eax,dword ptr ss:[ebp-0x6A4]

其中crud的地方，在トリノライン及其体验版是计算的方式，所以类似于：
004953C9   .  8D95 7CF9FFFF            lea edx,dword ptr ss:[ebp-0x684]
004953CF   .  8915 70215800            mov dword ptr ds:[0x582170],edx          ;  scr_crud
004953D5   .  8D85 88F9FFFF            lea eax,dword ptr ss:[ebp-0x678]
004953DB   .  A3 74215800              mov dword ptr ds:[0x582174],eax          ;  ogg_crud
004953E0   .  8D8D 60F9FFFF            lea ecx,dword ptr ss:[ebp-0x6A0]
004953E6   .  890D 78215800            mov dword ptr ds:[0x582178],ecx          ;  png_crud
004953EC   .  8D95 6CF9FFFF            lea edx,dword ptr ss:[ebp-0x694]
004953F2   .  8915 7C215800            mov dword ptr ds:[0x58217C],edx          ;  avi_curd
在トリノライン以前的crud是静态读取的，所以类似于：
00482821   .  C705 48CE5500>mov dword ptr ds:[0x55CE48],yorino_b.0050C3EC     ;  ASCII "uTyeJyh2" scr_crud
0048282B   .  C705 4CCE5500>mov dword ptr ds:[0x55CE4C],yorino_b.0050C3D4     ;  ASCII "UjFM8FxA" ogg_crud
00482835   .  C705 50CE5500>mov dword ptr ds:[0x55CE50],yorino_b.0050C3E0     ;  ASCII "i2Toka1x" png_crud
0048283F   .  C705 54CE5500>mov dword ptr ds:[0x55CE54],yorino_b.0050C3C8     ;  ASCII "gbVBKdy3" avi_curd
00482849   .  E8 02250000   call yorino_b.00484D50

（已经在トリノライン及其体验版，ソレヨリノ前奏诗及其アペンドH上测试通过）

crud一般就在 test.tst 字符串后面, 有的游戏是静态字符串, 有的是动态计算出来的

0048FC9B   > \68 78DA5100   push    0051DA78                           ;  ASCII "test.tst"
0048FCA0   .  68 A4D95300   push    0053D9A4
0048FCA5   .  8D85 54FFFFFF lea     eax, dword ptr [ebp-0xAC]
0048FCAB   .  50            push    eax
0048FCAC   .  E8 0F85F7FF   call    004081C0
0048FCB1   .  83C4 0C       add     esp, 0xC
0048FCB4   .  6A 04         push    0x4
0048FCB6   .  68 84DA5100   push    0051DA84                           ;  ASCII "test"
0048FCBB   .  8D85 54FFFFFF lea     eax, dword ptr [ebp-0xAC]
0048FCC1   .  E8 0A32F7FF   call    00402ED0
0048FCC6   .  E8 1518FFFF   call    004814E0
0048FCCB   .  83C4 08       add     esp, 0x8
0048FCCE   .  85C0          test    eax, eax
0048FCD0   .  74 0D         je      short 0048FCDF
0048FCD2   .  8D8D 54FFFFFF lea     ecx, dword ptr [ebp-0xAC]
0048FCD8   .  E8 F33D0000   call    00493AD0
0048FCDD   .^ EB 91         jmp     short 0048FC70
0048FCDF   >  8D85 54FFFFFF lea     eax, dword ptr [ebp-0xAC]
0048FCE5   .  E8 E631F7FF   call    00402ED0
0048FCEA   .  50            push    eax                                ; /FileName
0048FCEB   .  FF15 A0005000 call    dword ptr [<&KERNEL32.DeleteFileA>>; \DeleteFileA
0048FCF1   .  8D8D 54FFFFFF lea     ecx, dword ptr [ebp-0xAC]
0048FCF7   .  E8 D43D0000   call    00493AD0
0048FCFC   >  6A 01         push    0x1
0048FCFE   .  BF 78245700   mov     edi, 00572478
0048FD03   .  E8 78B3F7FF   call    0040B080
0048FD08   .  C785 50FFFFFF>mov     dword ptr [ebp-0xB0], 0053EC88     ;  ASCII "aLEkPCT4"
0048FD12   .  8B8D 50FFFFFF mov     ecx, dword ptr [ebp-0xB0]
0048FD18   .  51            push    ecx
0048FD19   .  33C0          xor     eax, eax
0048FD1B   .  E8 901CFFFF   call    <calc_crud_key>
0048FD20   .  83C4 04       add     esp, 0x4
0048FD23   .  8B95 50FFFFFF mov     edx, dword ptr [ebp-0xB0]
0048FD29   .  8915 4C085700 mov     dword ptr [0x57084C], edx
0048FD2F   .  8B85 50FFFFFF mov     eax, dword ptr [ebp-0xB0]
0048FD35   .  83C0 09       add     eax, 0x9
0048FD38   .  8985 50FFFFFF mov     dword ptr [ebp-0xB0], eax
0048FD3E   .  8B8D 50FFFFFF mov     ecx, dword ptr [ebp-0xB0]
0048FD44   .  51            push    ecx
0048FD45   .  33C0          xor     eax, eax
0048FD47   .  E8 641CFFFF   call    <calc_crud_key>
0048FD4C   .  83C4 04       add     esp, 0x4
0048FD4F   .  8B95 50FFFFFF mov     edx, dword ptr [ebp-0xB0]
0048FD55   .  8915 50085700 mov     dword ptr [0x570850], edx
0048FD5B   .  8B85 50FFFFFF mov     eax, dword ptr [ebp-0xB0]
0048FD61   .  83C0 09       add     eax, 0x9
0048FD64   .  8985 50FFFFFF mov     dword ptr [ebp-0xB0], eax
0048FD6A   .  8B8D 50FFFFFF mov     ecx, dword ptr [ebp-0xB0]
0048FD70   .  51            push    ecx
0048FD71   .  33C0          xor     eax, eax
0048FD73   .  E8 381CFFFF   call    <calc_crud_key>




读封包的CreateFileA:
00409975   .  6A 04         push    0x4
00409977   .  68 8C9C5000   push    00509C8C                                 ;  ASCII ".paz"
0040997C   .  8BC6          mov     eax, esi
0040997E   .  899C24 1C0200>mov     dword ptr [esp+0x21C], ebx
00409985   .  E8 86B1FFFF   call    00404B10
0040998A   .  8B4424 2C     mov     eax, dword ptr [esp+0x2C]
0040998E   .  BE 10000000   mov     esi, 0x10
00409993   .  397424 40     cmp     dword ptr [esp+0x40], esi
00409997   .  73 04         jnb     short 0040999D
00409999   .  8D4424 2C     lea     eax, dword ptr [esp+0x2C]
0040999D   >  53            push    ebx
0040999E   .  68 80000000   push    0x80
004099A3   .  6A 03         push    0x3
004099A5   .  53            push    ebx
004099A6   .  6A 01         push    0x1
004099A8   .  68 00000080   push    0x80000000
004099AD   .  50            push    eax
004099AE   .  FF15 741E5800 call    dword ptr [0x581E74]                     ;  kernel32.CreateFileA
004099B4   .  8BF8          mov     edi, eax
004099B6   .  897C24 20     mov     dword ptr [esp+0x20], edi
004099BA   .  83FF FF       cmp     edi, -0x1
004099BD   .  75 39         jnz     short 004099F8
004099BF   .  8B45 08       mov     eax, dword ptr [ebp+0x8]
004099C2   .  8B4D 0C       mov     ecx, dword ptr [ebp+0xC]
004099C5   .  899C88 0C0100>mov     dword ptr [eax+ecx*4+0x10C], ebx
004099CC   .  397424 40     cmp     dword ptr [esp+0x40], esi



Generate_Key:
每次调用call eax返回Blowfish key的一个字节，32次即为完整的key

1.
对于toc key，直接用get_toc_key.osc脚本即可解出

2.
对于dat key，断住j_decrypt_item
开始游戏，游戏会逐个揭秘封包里的文件,这里人工根据栈里的文件名猜封包
当断在j_decrypt_item时，对
movzx   ecx, al                                           ;  al = key
下断点，32次即为dat key


mov     r32, dword ptr [r32+0xC]
mov     r32, dword ptr [r32]
mov     r32, dword ptr [r32+0xC]
push    r32
call    r32
movzx   r32, r8


0047FD00   > /8B4D 0C       mov     ecx, dword ptr [ebp+0xC]
0047FD03   . |8B11          mov     edx, dword ptr [ecx]
0047FD05   . |8B42 0C       mov     eax, dword ptr [edx+0xC]
0047FD08   . |56            push    esi
0047FD09   . |FFD0          call    eax
0047FD0B   . |0FB6C8        movzx   ecx, al                                           ;  al = key
0047FD0E   . |C1E7 08       shl     edi, 0x8
0047FD11   . |0BF9          or      edi, ecx
0047FD13   . |B9 01000000   mov     ecx, 0x1
0047FD18   . |03F1          add     esi, ecx
0047FD1A   . |3B75 F4       cmp     esi, dword ptr [ebp-0xC]
0047FD1D   . |7C 02         jl      short 0047FD21
0047FD1F   . |33F6          xor     esi, esi
0047FD21   > |294D 08       sub     dword ptr [ebp+0x8], ecx
0047FD24   .^\75 DA         jnz     short 0047FD00
0047FD26   .  8B45 FC       mov     eax, dword ptr [ebp-0x4]                          ;  edi为key的4个字节
0047FD29   .  8B55 F0       mov     edx, dword ptr [ebp-0x10]
0047FD2C   .  8B1402        mov     edx, dword ptr [edx+eax]
0047FD2F   .  33D7          xor     edx, edi
0047FD31   .  8910          mov     dword ptr [eax], edx




找解密crud：
方法一（trinoline）：
搜索：
lea r32,[r32-const]
mov [const],r32
lea r32,[r32-const]
mov [const],r32
lea r32,[r32-const]
mov [const],r32
lea r32,[r32-const]
mov [const],r32

004953C9   .  8D95 7CF9FFFF lea edx,dword ptr ss:[ebp-0x684]
004953CF   .  8915 70215800 mov dword ptr ds:[0x582170],edx                    ;  scr_crud
004953D5   .  8D85 88F9FFFF lea eax,dword ptr ss:[ebp-0x678]
004953DB   .  A3 74215800   mov dword ptr ds:[0x582174],eax                    ;  ogg_crud
004953E0   .  8D8D 60F9FFFF lea ecx,dword ptr ss:[ebp-0x6A0]
004953E6   .  890D 78215800 mov dword ptr ds:[0x582178],ecx                    ;  png_crud
004953EC   .  8D95 6CF9FFFF lea edx,dword ptr ss:[ebp-0x694]
004953F2   .  8915 7C215800 mov dword ptr ds:[0x58217C],edx                    ;  avi_curd



方法二：
movsx   esi, byte ptr [ecx+ebx]
xor     esi, eax
and     esi, 0xFF
shr     eax, 0x8


00427F04   .  8BC3          mov     eax, ebx
00427F06   .  8D50 01       lea     edx, dword ptr [eax+0x1]
00427F09   .  8DA424 000000>lea     esp, dword ptr [esp]
00427F10   >  8A08          mov     cl, byte ptr [eax]                                ;  strlen(seed) !!!!
00427F12   .  40            inc     eax
00427F13   .  84C9          test    cl, cl
00427F15   .^ 75 F9         jnz     short 00427F10
00427F17   .  2BC2          sub     eax, edx
00427F19   .  8BD0          mov     edx, eax
00427F1B   .  83C8 FF       or      eax, 0xFFFFFFFF
00427F1E   .  33C9          xor     ecx, ecx
00427F20   >  3BCA          cmp     ecx, edx
00427F22   .  73 19         jnb     short 00427F3D
00427F24   .  0FBE3419      movsx   esi, byte ptr [ecx+ebx]
00427F28   .  33F0          xor     esi, eax
00427F2A   .  81E6 FF000000 and     esi, 0xFF
00427F30   .  C1E8 08       shr     eax, 0x8
00427F33   .  3304B5 C86F51>xor     eax, dword ptr [esi*4+0x516FC8]
00427F3A   .  41            inc     ecx
00427F3B   .^ EB E3         jmp     short 00427F20
00427F3D   >  F7D0          not     eax
00427F3F   .  C1E8 0C       shr     eax, 0xC
00427F42   .  25 FF000000   and     eax, 0xFF
00427F47   .  8945 D0       mov     dword ptr [ebp-0x30], eax
00427F4A   .  33FF          xor     edi, edi
00427F4C   .  8D6424 00     lea     esp, dword ptr [esp]
00427F50   >  3B7D D0       cmp     edi, dword ptr [ebp-0x30]
00427F53   .  73 52         jnb     short 00427FA7
00427F55   .  8B85 9CFEFFFF mov     eax, dword ptr [ebp-0x164]
00427F5B   .  8B8D A0FEFFFF mov     ecx, dword ptr [ebp-0x160]
00427F61   .  40            inc     eax
00427F62   .  25 FF000000   and     eax, 0xFF
00427F67   .  0FB69405 A4FE>movzx   edx, byte ptr [ebp+eax-0x15C]
00427F6F   .  8DB405 A4FEFF>lea     esi, dword ptr [ebp+eax-0x15C]
00427F76   .  03CA          add     ecx, edx
00427F78   .  81E1 FF000000 and     ecx, 0xFF
00427F7E   .  0FB69C0D A4FE>movzx   ebx, byte ptr [ebp+ecx-0x15C]


这里能找到内存中解密sc文件的crud，内存附近就是其它crud，可以下硬件断点依次判断类型
0047C6B0  /$  55            push    ebp
0047C6B1  |.  8BEC          mov     ebp, esp
0047C6B3  |.  83E4 F8       and     esp, 0xFFFFFFF8
0047C6B6  |.  64:A1 0000000>mov     eax, dword ptr fs:[0]
0047C6BC  |.  6A FF         push    -0x1
0047C6BE  |.  68 F21D5000   push    00501DF2
0047C6C3  |.  50            push    eax
0047C6C4  |.  64:8925 00000>mov     dword ptr fs:[0], esp
0047C6CB  |.  81EC F8000000 sub     esp, 0xF8
0047C6D1  |.  53            push    ebx
0047C6D2  |.  56            push    esi
0047C6D3  |.  8BF1          mov     esi, ecx
0047C6D5  |.  33DB          xor     ebx, ebx
0047C6D7  |.  57            push    edi
0047C6D8  |.  3BF3          cmp     esi, ebx
0047C6DA  |.  0F84 BA000000 je      0047C79A
0047C6E0  |.  385D 0C       cmp     byte ptr [ebp+0xC], bl
0047C6E3  |.  75 1A         jnz     short 0047C6FF
0047C6E5  |.  8B06          mov     eax, dword ptr [esi]
0047C6E7  |.  8B50 30       mov     edx, dword ptr [eax+0x30]
0047C6EA  |.  FFD2          call    edx
0047C6EC  |.  8B4D 08       mov     ecx, [arg.1]
0047C6EF  |.  53            push    ebx
0047C6F0  |.  50            push    eax
0047C6F1  |.  81C1 74200000 add     ecx, 0x2074
0047C6F7  |.  83C8 FF       or      eax, 0xFFFFFFFF
0047C6FA  |.  E8 D168F8FF   call    00402FD0
0047C6FF  |>  8B06          mov     eax, dword ptr [esi]
0047C701  |.  8B50 28       mov     edx, dword ptr [eax+0x28]
0047C704  |.  8BCE          mov     ecx, esi
0047C706  |.  FFD2          call    edx
0047C708  |.  8BF8          mov     edi, eax
0047C70A  |.  897C24 0C     mov     dword ptr [esp+0xC], edi
0047C70E  |.  83FF 01       cmp     edi, 0x1
0047C711  |.  0F82 83000000 jb      0047C79A
0047C717  |.  6A 03         push    0x3
0047C719  |.  8D4424 50     lea     eax, dword ptr [esp+0x50]
0047C71D  |.  50            push    eax
0047C71E  |.  8BCF          mov     ecx, edi
0047C720  |.  895C24 58     mov     dword ptr [esp+0x58], ebx
0047C724  |.  895C24 5C     mov     dword ptr [esp+0x5C], ebx
0047C728  |.  885C24 60     mov     byte ptr [esp+0x60], bl
0047C72C  |.  E8 7F6F0300   call    004B36B0
0047C731  |.  899C24 0C0100>mov     dword ptr [esp+0x10C], ebx
0047C738  |.  8B4C24 54     mov     ecx, dword ptr [esp+0x54]
0047C73C  |.  8D9424 980000>lea     edx, dword ptr [esp+0x98]
0047C743  |.  894C24 2C     mov     dword ptr [esp+0x2C], ecx
0047C747  |.  52            push    edx
0047C748  |.  B9 94F35100   mov     ecx, 0051F394                                   ;  ASCII "scr"
0047C74D  |.  E8 3E9AF8FF   call    00406190
0047C752  |.  C68424 0C0100>mov     byte ptr [esp+0x10C], 0x1
0047C75A  |.  A1 70215800   mov     eax, dword ptr [0x582170]
0047C75F  |.  50            push    eax
0047C760  |.  56            push    esi
0047C761  |.  8D8C24 A00000>lea     ecx, dword ptr [esp+0xA0]
0047C768  |.  51            push    ecx
0047C769  |.  E8 E29DF8FF   call    00406550                                        ;  decrypt scr





decrypt_index：

004099A0 > $  55            push    ebp                                               ;  j_decrypt_index
004099A1   .  8BEC          mov     ebp, esp
004099A3   .  83E4 F8       and     esp, 0xFFFFFFF8
004099A6   .  6A FF         push    -0x1
004099A8   .  68 0C8B4F00   push    004F8B0C                                          ;  SE 处理程序安装
004099AD   .  64:A1 0000000>mov     eax, dword ptr fs:[0]
004099B3   .  50            push    eax
004099B4   .  64:8925 00000>mov     dword ptr fs:[0], esp
004099BB   .  81EC 00020000 sub     esp, 0x200
004099C1   .  53            push    ebx
004099C2   .  56            push    esi
004099C3   .  33DB          xor     ebx, ebx
004099C5   .  8BC2          mov     eax, edx
004099C7   .  57            push    edi
004099C8   .  C74424 40 0F0>mov     dword ptr [esp+0x40], 0xF
004099D0   .  895C24 3C     mov     dword ptr [esp+0x3C], ebx
004099D4   .  885C24 2C     mov     byte ptr [esp+0x2C], bl
004099D8   .  8D70 01       lea     esi, dword ptr [eax+0x1]
004099DB   .  EB 03         jmp     short 004099E0
004099DD      8D49 00       lea     ecx, dword ptr [ecx]
004099E0   >  8A08          mov     cl, byte ptr [eax]
004099E2   .  40            inc     eax
004099E3   .  84C9          test    cl, cl
004099E5   .^ 75 F9         jnz     short 004099E0
004099E7   .  2BC6          sub     eax, esi
004099E9   .  52            push    edx
004099EA   .  8BF8          mov     edi, eax
004099EC   .  8D7424 30     lea     esi, dword ptr [esp+0x30]
004099F0   .  E8 1BC2FFFF   call    00405C10
004099F5   .  6A 04         push    0x4
004099F7   .  68 A84C5000   push    00504CA8                                          ;  ASCII ".paz"
004099FC   .  8BC6          mov     eax, esi
004099FE   .  899C24 1C0200>mov     dword ptr [esp+0x21C], ebx
00409A05   .  E8 96B0FFFF   call    00404AA0
00409A0A   .  8B4424 2C     mov     eax, dword ptr [esp+0x2C]
00409A0E   .  BE 10000000   mov     esi, 0x10
00409A13   .  397424 40     cmp     dword ptr [esp+0x40], esi
00409A17   .  73 04         jnb     short 00409A1D
00409A19   .  8D4424 2C     lea     eax, dword ptr [esp+0x2C]
00409A1D   >  53            push    ebx                                               ; /hTemplateFile
00409A1E   .  68 80000000   push    0x80                                              ; |Attributes = NORMAL
00409A23   .  6A 03         push    0x3                                               ; |Mode = OPEN_EXISTING
00409A25   .  53            push    ebx                                               ; |pSecurity
00409A26   .  6A 01         push    0x1                                               ; |ShareMode = FILE_SHARE_READ
00409A28   .  68 00000080   push    0x80000000                                        ; |Access = GENERIC_READ
00409A2D   .  50            push    eax                                               ; |FileName
00409A2E   .  FF15 6C095800 call    dword ptr [0x58096C]                              ; \CreateFileA



decrypt_item：

0040A320 >/.  55            push    ebp                                               ;  j_decrypt_item
0040A321  |.  8BEC          mov     ebp, esp
0040A323  |.  83E4 F8       and     esp, 0xFFFFFFF8
0040A326  |.  6A FF         push    -0x1
0040A328  |.  68 F4834F00   push    004F83F4                                          ;  SE 处理程序安装
0040A32D  |.  64:A1 0000000>mov     eax, dword ptr fs:[0]
0040A333  |.  50            push    eax
0040A334  |.  64:8925 00000>mov     dword ptr fs:[0], esp
0040A33B  |.  81EC 58020000 sub     esp, 0x258
0040A341  |.  53            push    ebx
0040A342  |.  56            push    esi
0040A343  |.  57            push    edi
0040A344  |.  8BD9          mov     ebx, ecx
0040A346  |.  8DB3 B4010000 lea     esi, dword ptr [ebx+0x1B4]
0040A34C  |.  68 D84B5000   push    00504BD8
0040A351  |.  33FF          xor     edi, edi
0040A353  |.  895C24 18     mov     dword ptr [esp+0x18], ebx
0040A357  |.  E8 B4B8FFFF   call    00405C10
0040A35C  |.  8B4D 08       mov     ecx, [arg.1]
0040A35F  |.  8A01          mov     al, byte ptr [ecx]
0040A361  |.  884424 0C     mov     byte ptr [esp+0xC], al
0040A365  |.  8D79 01       lea     edi, dword ptr [ecx+0x1]
0040A368  |.  84C0          test    al, al
0040A36A  |.  74 54         je      short 0040A3C0
0040A36C  |.  8D6424 00     lea     esp, dword ptr [esp]
0040A370  |>  3C 81         /cmp     al, 0x81
0040A372  |.  72 04         |jb      short 0040A378
0040A374  |.  3C 9F         |cmp     al, 0x9F
0040A376  |.  76 08         |jbe     short 0040A380
0040A378  |>  8D48 20       |lea     ecx, dword ptr [eax+0x20]
0040A37B  |.  80F9 0F       |cmp     cl, 0xF
0040A37E  |.  77 1D         |ja      short 0040A39D
0040A380  |>  8B5424 0C     |mov     edx, dword ptr [esp+0xC]
0040A384  |.  52            |push    edx
0040A385  |.  E8 267CFFFF   |call    00401FB0
0040A38A  |.  8A07          |mov     al, byte ptr [edi]
0040A38C  |.  884424 10     |mov     byte ptr [esp+0x10], al
0040A390  |.  8B4C24 10     |mov     ecx, dword ptr [esp+0x10]
0040A394  |.  51            |push    ecx
0040A395  |.  E8 167CFFFF   |call    00401FB0
0040A39A  |.  47            |inc     edi
0040A39B  |.  EB 18         |jmp     short 0040A3B5
0040A39D  |>  8D50 BF       |lea     edx, dword ptr [eax-0x41]
0040A3A0  |.  80FA 19       |cmp     dl, 0x19
0040A3A3  |.  77 06         |ja      short 0040A3AB
0040A3A5  |.  04 20         |add     al, 0x20
0040A3A7  |.  884424 0C     |mov     byte ptr [esp+0xC], al
0040A3AB  |>  8B4424 0C     |mov     eax, dword ptr [esp+0xC]
0040A3AF  |.  50            |push    eax
0040A3B0  |.  E8 FB7BFFFF   |call    00401FB0
0040A3B5  |>  8A07          |mov     al, byte ptr [edi]
0040A3B7  |.  47            |inc     edi
0040A3B8  |.  884424 0C     |mov     byte ptr [esp+0xC], al
0040A3BC  |.  84C0          |test    al, al
0040A3BE  |.^ 75 B0         \jnz     short 0040A370





string:
00420080  |>  8B43 28       /mov     eax, dword ptr [ebx+0x28]
00420083  |. |0FB630        |movzx   esi, byte ptr [eax]
00420086  |. |85F6          |test    esi, esi
00420088  |. |0F84 15050000 |je      004205A3
0042008E  |. |40            |inc     eax
0042008F  |. |8943 28       |mov     dword ptr [ebx+0x28], eax
00420092  |. |81FE 81000000 |cmp     esi, 0x81
00420098  |. |72 20         |jb      short 004200BA
0042009A  |. |81FE FE000000 |cmp     esi, 0xFE
004200A0  |. |0F86 A1000000 |jbe     00420147
004200A6  |. |81FE E0000000 |cmp     esi, 0xE0
004200AC  |. |72 0C         |jb      short 004200BA
004200AE  |. |81FE FE000000 |cmp     esi, 0xFE
004200B4  |. |0F86 8D000000 |jbe     00420147
004200BA  |> |80BB 4C030000>|cmp     byte ptr [ebx+0x34C], 0x0
004200C1  |. |0F84 60030000 |je      00420427


draw_text
0041FDE0 >/$  55            push    ebp                                 ;  draw_text
0041FDE1  |.  8BEC          mov     ebp, esp
0041FDE3  |.  64:A1 0000000>mov     eax, dword ptr fs:[0]
0041FDE9  |.  6A FF         push    -0x1
0041FDEB  |.  68 A1AA4E00   push    004EAAA1
0041FDF0  |.  50            push    eax
0041FDF1  |.  64:8925 00000>mov     dword ptr fs:[0], esp
0041FDF8  |.  81EC B4000000 sub     esp, 0xB4
0041FDFE  |.  53            push    ebx
0041FDFF  |.  8BD9          mov     ebx, ecx
0041FE01  |.  807B 08 00    cmp     byte ptr [ebx+0x8], 0x0
0041FE05  |.  56            push    esi
0041FE06  |.  57            push    edi


filename:
00419342  |.  8D78 01         lea     edi, dword ptr [eax+0x1]
00419345  |>  8A08            /mov     cl, byte ptr [eax]                      ;  eax == filename
00419347  |.  40              |inc     eax
00419348  |.  84C9            |test    cl, cl
0041934A  |.^ 75 F9           \jnz     short 00419345
0041934C  |.  2BC7            sub     eax, edi
0041934E  |.  52              push    edx
0041934F  |.  8BF8            mov     edi, eax
00419351  |.  E8 7AC5FEFF     call    004058D0
00419356  |.  8B7D 08         mov     edi, [arg.1]
00419359  |.  E8 32FEFFFF     call    00419190                                 ;  filename_info!!!!!!




generate_bmp:
00426608  |> /8B45 D0       /mov     eax, [local.12]                           ;  generate_bmp
0042660B  |. |3B45 C0       |cmp     eax, [local.16]
0042660E  |. |73 38         |jnb     short 00426648
00426610  |. |9C            |pushfd
00426611  |. |FD            |std
00426612  |. |8B4D C4       |mov     ecx, [local.15]
00426615  |. |8B75 E8       |mov     esi, [local.6]
00426618  |. |8B7D C8       |mov     edi, [local.14]
0042661B  |. |BB 03000000   |mov     ebx, 0x3
00426620  |. |BA 000000FF   |mov     edx, 0xFF000000
00426625  |> |8B06          |/mov     eax, dword ptr [esi]
00426627  |. |2BF3          ||sub     esi, ebx
00426629  |. |25 FFFFFF00   ||and     eax, 0xFFFFFF
0042662E  |. |0BC2          ||or      eax, edx
00426630  |. |AB            ||stos    dword ptr es:[edi]
00426631  |. |49            ||dec     ecx
00426632  |.^|75 F1         |\jnz     short 00426625
00426634  |. |9D            |popfd
00426635  |. |8B4D 08       |mov     ecx, [arg.1]
00426638  |. |8B41 78       |mov     eax, dword ptr [ecx+0x78]
0042663B  |. |0145 E8       |add     [local.6], eax
0042663E  |. |0145 C8       |add     [local.14], eax
00426641  |. |FF45 D0       |inc     [local.12]
00426644  |. |8BD9          |mov     ebx, ecx
00426646  |.^\EB C0         \jmp     short 00426608









